{"remainingRequest":"/Users/francescamorini/projects/policy-portal/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/francescamorini/projects/policy-portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/francescamorini/projects/policy-portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/francescamorini/projects/policy-portal/node_modules/library/src/components/SensesDownload.vue?vue&type=template&id=23f2c6a0&scoped=true&","dependencies":[{"path":"/Users/francescamorini/projects/policy-portal/node_modules/library/src/components/SensesDownload.vue","mtime":499162500000},{"path":"/Users/francescamorini/projects/policy-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/policy-portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/policy-portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/francescamorini/projects/policy-portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}